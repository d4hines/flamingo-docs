(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{70:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),i=(n(0),n(78)),o={title:"Step 2: Relationships \u2764\ufe0f"},s={unversionedId:"basics/relationships",id:"basics/relationships",isDocsHomePage:!1,title:"Step 2: Relationships \u2764\ufe0f",description:"If we've defined our sorts, we're well on our way to a working model of our system.",source:"@site/docs\\basics\\relationships.md",permalink:"/docs/basics/relationships",editUrl:"https://github.com/flamingo-lang/flamingo-docs/edit/master/docs/basics/relationships.md",sidebar:"sidebar",previous:{title:"Step 1: Sorts \ud83c\udf0e",permalink:"/docs/basics/sorts"},next:{title:"Step 3: Actions \ud83d\udca3",permalink:"/docs/basics/actions"}},c=[],l={rightToc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"If we've defined our sorts, we're well on our way to a working model of our system.\nBut sorts aren't enough: as they say, life is all about ",Object(i.b)("em",{parentName:"p"},"relationships"),". In ALM, we\ncapture relationships with ",Object(i.b)("em",{parentName:"p"},"functions"),". These are functions in the mathematical sense:\nthey aren't a unit of computation like in imperative or functional programming - rather,\nthey are just labels that map elements of zero or more sorts into another sort[",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#1"}),"1"),"]."),Object(i.b)("p",null,"There are two kinds of functions in ALM: ",Object(i.b)("em",{parentName:"p"},"statics"),", whose mappings never change,\nand ",Object(i.b)("em",{parentName:"p"},"fluents"),", whose mappings change over time as a consequence of actions. Fluents\ncome in two flavors, basic and defined - we'll address the difference shortly."),Object(i.b)("p",null,"Let's extend our fruit example with some statics and fluents:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-alm"}),"module fruits\nsorts\n    fruits :: universe\n    varieties :: { macintosh, fuji, golden_delicious, granny_smith }\n    apples :: universe\n        attributes\n            variety : varieties\n    oranges :: fruits\nstatics\n    good_for_baking : varieties -> booleans\nfluents\n    basic\n        in_basket : fruit -> booleans\n        basket_is_full : booleans\n    defined\n        can_bake_pie : booleans\n")),Object(i.b)("p",null,"Our first function, the static ",Object(i.b)("inlineCode",{parentName:"p"},"good_for_baking")," will be used to denote whether a variety\nof apple can be used in making a pie."),Object(i.b)("p",null,"The fluent ",Object(i.b)("inlineCode",{parentName:"p"},"in_basket")," indicates that a particular fruit is in our basket. Note that ",Object(i.b)("inlineCode",{parentName:"p"},"in_basket"),"\nis a ",Object(i.b)("em",{parentName:"p"},"basic")," fluent. Basic fluents have ",Object(i.b)("em",{parentName:"p"},"inertia"),": if you put a fruit in the basket, it will stay\nthere until you remove it."),Object(i.b)("p",null,"The basic fluent ",Object(i.b)("inlineCode",{parentName:"p"},"basket_is_full")," describes when we can't fit any more fruit in the basket.\nAs a function, it takes zero parameters; hence it doesn't have the ",Object(i.b)("inlineCode",{parentName:"p"},"->"),"."),Object(i.b)("p",null,"The fluent ",Object(i.b)("inlineCode",{parentName:"p"},"can_bake_pie")," indicates we have enough fruit to bake a pie. Note that ",Object(i.b)("inlineCode",{parentName:"p"},"can_bake_pie"),"\nis a ",Object(i.b)("em",{parentName:"p"},"defined")," fluent. The return value of a defined fluents is always ",Object(i.b)("inlineCode",{parentName:"p"},"booleans"),".\nAdditionally, defined fluents do ",Object(i.b)("em",{parentName:"p"},"not")," have inertia - they are only true when something ",Object(i.b)("em",{parentName:"p"},"makes\nthem true"),", and immediately become false if there conditions are not satisfied (we'll define the\nconditions for ",Object(i.b)("inlineCode",{parentName:"p"},"can_bake_pie")," shortly)."),Object(i.b)("hr",null),Object(i.b)("p",null,"[",Object(i.b)("a",{name:"1"},"1"),"]",": Ok, denotationally speaking they ",Object(i.b)("em",{parentName:"p"},"are")," the same thing, but\npractically, they're quite different."))}p.isMDXComponent=!0},78:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},f=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),f=a,m=u["".concat(o,".").concat(f)]||u[f]||b[f]||i;return n?r.a.createElement(m,s(s({ref:t},l),{},{components:n})):r.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"}}]);