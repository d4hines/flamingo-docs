(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{62:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(2),a=n(6),o=(n(0),n(78)),i={title:"Step 1: Sorts \ud83c\udf0e"},s={unversionedId:"basics/sorts",id:"basics/sorts",isDocsHomePage:!1,title:"Step 1: Sorts \ud83c\udf0e",description:"Every object in an ALM system has a sort. Sorts are roughly analogous",source:"@site/docs\\basics\\sorts.md",permalink:"/flamingo-docs/docs/basics/sorts",editUrl:"https://github.com/flamingo-lang/flamingo-docs/edit/master/docs/basics/sorts.md",sidebar:"sidebar",previous:{title:"Intro \ud83e\udd13",permalink:"/flamingo-docs/docs/basics/basics"},next:{title:"Step 2: Relationships \u2764\ufe0f",permalink:"/flamingo-docs/docs/basics/relationships"}},c=[],l={rightToc:c};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Every object in an ALM system has a ",Object(o.b)("em",{parentName:"p"},"sort"),". Sorts are roughly analogous\nto classes in object-oriented languages or types in typed functional languages,\nbut ALM sorts are simpler than both. Here's what you need to know:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Sorts can optionally declare ",Object(o.b)("em",{parentName:"li"},"attributes"),". Every element of the will have\ninstances of those attributes associated with it. These are like class-level\nproperties, except they are immutable."),Object(o.b)("li",{parentName:"ul"},"Every sort is a subsort of another sort (except the top sort, called\n",Object(o.b)("inlineCode",{parentName:"li"},"universe"),"). Any attributes associated with a sort are inherited by its\nsubsorts.")),Object(o.b)("p",null,"In our fruit and basket system, fruits are obviously going to need to be\nan sort of object in our domain. Let's further suppose there are two kinds\nof fruits: apples and oranges. Here's how we would write that in ALM:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-alm"}),"module fruit_and_basket\nsorts\n    fruits :: universe\n    apples :: fruits\n    oranges :: fruits\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"::")," is called the ",Object(o.b)("em",{parentName:"p"},"specialization operator"),". ",Object(o.b)("inlineCode",{parentName:"p"},"fruits :: universe"),' reads\n"the sort ',Object(o.b)("inlineCode",{parentName:"p"},"fruits")," is a subsort of ",Object(o.b)("inlineCode",{parentName:"p"},"universe"),'". ',Object(o.b)("inlineCode",{parentName:"p"},"apples")," and ",Object(o.b)("inlineCode",{parentName:"p"},"oranges")," are both\nsubsorts of ",Object(o.b)("inlineCode",{parentName:"p"},"fruits"),". This means you can use an element of ",Object(o.b)("inlineCode",{parentName:"p"},"apples")," anywhere\nan element of ",Object(o.b)("inlineCode",{parentName:"p"},"fruits")," is required, but, obviously, you can't use an element\nof ",Object(o.b)("inlineCode",{parentName:"p"},"oranges")," where an element of ",Object(o.b)("inlineCode",{parentName:"p"},"apples")," is required."),Object(o.b)("p",null,"While not used in this example, the right hand side of the specialization\noperator accepts a comma-separated list of sorts, e.g:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"sort1 :: sort2, sort3, sort4\n")),Object(o.b)("p",null,"You can also define a sort by explicitly enumerating its elements.\nLet's do that to define several varieties of apples:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"varieties :: { macintosh, fuji, golden_delicious, granny_smith }\n")),Object(o.b)("p",null,"Objects often have ",Object(o.b)("em",{parentName:"p"},"attributes")," associated with them, that is,\nproperties that are intrinsic and never change.\nLet's modify our definition of ",Object(o.b)("inlineCode",{parentName:"p"},"apples")," to include variety as an attribute:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"...\n    apples :: universe\n        attributes\n            variety : varieties\n...\n")),Object(o.b)("p",null,"Now, when we construct an instance of ",Object(o.b)("inlineCode",{parentName:"p"},"apples"),", we must give an element of\n",Object(o.b)("inlineCode",{parentName:"p"},"varieties")," to be associated with it (the same would hold for any subsort\nof ",Object(o.b)("inlineCode",{parentName:"p"},"apples"),")."),Object(o.b)("p",null,"There you have it! We've defined the sorts of our fruit and basket system!\nIn addition to user-defined sorts, there are several built-in sorts like\n",Object(o.b)("inlineCode",{parentName:"p"},"booleans"),", ",Object(o.b)("inlineCode",{parentName:"p"},"naturals")," (the numbers 0 to \u221e), and the ",Object(o.b)("inlineCode",{parentName:"p"},"integers"),". "))}p.isMDXComponent=!0},78:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=p(n),d=r,m=b["".concat(i,".").concat(d)]||b[d]||u[d]||o;return n?a.a.createElement(m,s(s({ref:t},l),{},{components:n})):a.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);